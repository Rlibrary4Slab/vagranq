<%= Gon::Base.render_data({}) %>
<%= form_for(@item) do |f| %>
  <% if @item.errors.any? %>
    <div id="error_explanation">

      <ul>
      <% @item.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  <div id="posting_buttons">
   <hidden type="button" id="tansubmit" value="ansubmit">
       <hidden type="button" id="dansubmit" value="ansubmit">


  </div> 
   <%= f.hidden_field :user_id, value: current_user.id %>
    <div class="field">
      <%= f.select :category ,Item.categories.keys.to_a%></div>
    <div class="field">
      <%= f.label :title %><br>
      <%= f.text_field :title %>
    </div>
    <div>
      <%= image_tag @item.image,:class =>"item_eyecatch_img" %>
      <%= f.label :image %><br>
      <%= f.file_field :image %>
    </div>
    <div class="description_field">
      <%= f.label :description, "説明"%><br>
      <%= f.text_area :description %>
     
    </div>
    <div class="item_address" >
      <%= f.label :address%><br>
      <%= f.hidden_field :address ,id: "item_add"%>
      <div id="map"></div>
    </div>
    <div class="field item_tags" >
     <label>スポット</label>
     <ul id="item-tags"></ul>
    </div>
    <div class="field">
     <ul  id="ul_item_day">

        <%= f.fields_for :item_days do |builder| %>
          <%= render "item_day_fields", f: builder  %>
        <% end %>


    <%= link_to_add_fieldsl "+", f, :item_days %>
     </ul>
    </div>
    <div class="description_field">
      <%= f.label :phonenumber, "電話番号"%><br>
      <%= f.text_field :phonenumber %>
     
    <div>
      <%= f.label :remark,"備考" %><br>
      <%= f.text_area :remark %>
    </div>
    <% if !@item.new_record?  %>
    <div class="field">
      <%= f.label "統合先アイテムを入力　（例：1）" %><br>
      <%= f.text_field :combine %>
    </div>

    <% end %>


  <%= f.submit 'このまま保存する', :id => "fullput",:style =>"display",:class => 'btn btn-primary' %>
  </div>
   </div>
<style type="text/css">
  #map { height: 400px;
    margin-left:auto;
    margin-right:auto;
    text-align:left;
    width: 80%;}
</style>
   

  
<% end %>
<input type="text" id="pac-input" value="<%= @item.address%>" style="height:36px; margin-top:9px;" />
<script>
  function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: <%= @item.latitude.nil? ? "-33.8688" : @item.latitude%>,
                    lng: <%= @item.longitude.nil? ? "151.2195" : @item.longitude%>},
          zoom: 13,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
        var Marker;
        google.maps.event.addListener(map, 'click',
          function(event) {
            if (Marker){Marker.setMap(null)};
            Marker = new google.maps.Marker({
             position: event.latLng,
             draggable: true,
             map: map
            });
            geocode();
 	});

        function geocode(){  
         var geocoder = new google.maps.Geocoder();
         geocoder.geocode({ 'location': Marker.getPosition()}, 
         function(results, status) {
         if (status == google.maps.GeocoderStatus.OK && results[0]){
          document.getElementById('item_add').value = 
            results[0].formatted_address.replace(/^日本、/, '');
          }else{
           document.getElementById('item_add').value = 
           "Geocode 取得に失敗しました";
             alert("Geocode 取得に失敗しました reason: "+ status);
         }
  });
 }

      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBph7ayjW9Kx-IXJ-EijLXvJX7HEzpTbgA&libraries=places&callback=initMap" async defer></script>
